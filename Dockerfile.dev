# syntax=docker/dockerfile:1

# Use an official Python runtime as a parent image
FROM python:3.10-slim

LABEL org.opencontainers.image.source https://github.com/beecave-homelab/insanely-fast-whisper-rocm

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PIP_NO_CACHE_DIR=off
ENV TZ=Europe/Amsterdam
ENV ROCM_PATH=/opt/rocm
ENV HSA_OVERRIDE_GFX_VERSION=10.3.0

# Install OS-level deps needed for audio backends
RUN apt-get update -y && apt-get upgrade -y && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ffmpeg \
    libsndfile1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set the working directory in the container
WORKDIR /app

# Copy requirement files first
COPY requirements-all.txt /app/
# COPY requirements.txt /app/
# COPY requirements-onnxruntime-rocm.txt /app/
# COPY requirements-rocm.txt /app/
COPY requirements-dev.txt /app/

# Install project dependencies from requirements files.
RUN pip install --no-cache-dir -r requirements-all.txt
# RUN pip install --no-cache-dir -r requirements.txt
# RUN pip install --no-cache-dir -r requirements-onnxruntime-rocm.txt
# RUN pip install --no-cache-dir -r requirements-rocm.txt
RUN pip install --no-cache-dir -r requirements-dev.txt

# Copy the project definition file to leverage Docker layer caching for dependencies
COPY pyproject.toml /app/
COPY openapi.yaml /app/

# Copy the application source code
# This is needed for `pip install .` to build and install the local package.
# It assumes your main package source is in the 'insanely_fast_whisper_api' directory.
COPY ./insanely_fast_whisper_api /app/insanely_fast_whisper_api/

# Now, install the local package itself
# This command reads pyproject.toml (already copied) and installs the current project.
RUN pip install -U pip
RUN pip install --no-cache-dir .

# After `pip install .`, the package `insanely_fast_whisper_api` and its CLI/modules
# should be available in the Python environment.

# Added in case Gradio is used and needs to be accessible; remove if not needed.
ENV GRADIO_SERVER_NAME="0.0.0.0"
ENV TORCHAUDIO_USE_SOUNDFILE=1

# Expose default internal ports (API/WebUI). Actual host bindings are controlled by Compose.
EXPOSE 8888
EXPOSE 7860

# Use the package entrypoint so host/port are controlled by env vars (API_HOST/API_PORT).
# docker-compose.dev.yaml overrides this CMD to run the WebUI as needed.
CMD ["insanely-fast-whisper-api"]
