"""Storage backend abstractions and implementations for ASR results."""

import json

# Placeholder for logger
import logging
from abc import ABC, abstractmethod
from pathlib import Path
from typing import Any

logger = logging.getLogger(__name__)


class BaseStorage(ABC):  # pylint: disable=too-few-public-methods
    """Abstract base class for storage backends."""

    @abstractmethod
    def save(
        self, data: dict[str, Any], destination_path: Path, task: str
    ) -> str | None:
        """Saves the data to the specified destination."""


class JsonStorage(BaseStorage):  # pylint: disable=too-few-public-methods
    """Stores transcription results as JSON files."""

    def save(
        self, data: dict[str, Any], destination_path: Path, task: str
    ) -> str | None:
        """Saves the transcription data to a JSON file."""
        # Ensure the directory exists
        destination_path.parent.mkdir(parents=True, exist_ok=True)

        # The destination_path is now expected to be the full desired filename
        # (e.g., "audio_transcribe_20230101T120000Z.json") as generated by FilenameGenerator.
        # Using .with_suffix('.json') ensures it has the .json extension,
        # which is benign if destination_path already has it.
        output_filename = destination_path.with_suffix(".json")

        try:
            with open(output_filename, "w", encoding="utf-8") as f:
                json.dump(data, f, indent=4, ensure_ascii=False)
            logger.info("Transcription result saved to %s", output_filename)
            return str(output_filename)
        except OSError as e:
            logger.error(
                "Error saving transcription to %s: %s",
                output_filename,
                e,
                exc_info=True,
            )
            return None


class StorageFactory:  # pylint: disable=too-few-public-methods
    """Factory for creating storage instances."""

    @staticmethod
    def create(kind: str = "json") -> BaseStorage:
        """Creates a storage backend based on the kind specified."""
        if kind == "json":
            return JsonStorage()
        # Add other storage types here in the future
        # elif kind == "sqlite":
        #     return SQLiteStorage()
        raise ValueError(f"Unsupported storage kind: {kind}")
